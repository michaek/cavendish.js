// Generated by CoffeeScript 1.3.3
(function() {
  var $, Cavendish, defaults;

  $ = jQuery;

  Cavendish = (function() {

    Cavendish.prototype.version = '0.0.1';

    function Cavendish(show, options) {
      this.show = show;
      this.options = options;
      this.slides = this.show.find(this.options.slideSelector);
      if (this.slides.length > 0) {
        this.initialize();
      }
    }

    Cavendish.prototype.initialize = function() {
      var _this = this;
      this.plugins = $.map(this.options.use_plugins, function(name) {
        return new $.fn.cavendish.plugins[name](_this);
      });
      this.last = $();
      this.length = this.slides.length;
      this.show.data('cavendish', this).addClass(this.options.class_names.show);
      $.each(this.plugins, function() {
        return this.setup();
      });
      this.goto(0);
      return this.slides.not(this.current).addClass(this.options.class_names.slide.before);
    };

    Cavendish.prototype.next = function() {
      var index;
      index = this.index + 1;
      if (index >= this.length && this.options.loop) {
        index = 0;
      }
      return this.goto(index);
    };

    Cavendish.prototype.prev = function() {
      var index;
      index = this.index - 1;
      if (index < 0 && this.options.loop) {
        index = this.length - 1;
      }
      return this.goto(index);
    };

    Cavendish.prototype.goto = function(index) {
      var classes, key, name,
        _this = this;
      if (!(this.slides[index] != null)) {
        return;
      }
      this.index = index;
      if (this.current != null) {
        this.last = this.current;
      }
      this.current = this.slides.eq(this.index);
      classes = this.options.class_names.slide;
      this.slides.removeClass(((function() {
        var _results;
        _results = [];
        for (key in classes) {
          name = classes[key];
          _results.push(name);
        }
        return _results;
      })()).join(' '));
      this.last.addClass(classes.after);
      this.current.addClass(classes.on);
      this.slides.each(function(index, slide) {
        if (index < _this.index) {
          return $(slide).addClass(classes.left);
        } else if (index > _this.index) {
          return $(slide).addClass(classes.right);
        }
      });
      this.slides.not(this.last).not(this.current).addClass(classes.before);
      return $.each(this.plugins, function() {
        return this.transition();
      });
    };

    return Cavendish;

  })();

  $.fn.cavendish = function(options) {
    var cavendish;
    if (typeof options !== 'string') {
      options = $.extend(true, {}, defaults, options);
      return this.each(function() {
        return new Cavendish($(this), options);
      });
    } else {
      cavendish = $(this).data('cavendish');
      if (cavendish != null) {
        switch (options) {
          case 'next':
            cavendish.next();
            break;
          case 'prev':
            cavendish.prev();
            break;
          case 'cavendish':
            return cavendish;
        }
      }
      return this;
    }
  };

  defaults = $.fn.cavendish.defaults = {
    loop: true,
    slideSelector: '> ol > li',
    use_plugins: [],
    class_names: {
      show: 'cavendish-slideshow',
      slide: {
        left: 'cavendish-left',
        right: 'cavendish-right',
        on: 'cavendish-onstage',
        before: 'cavendish-before',
        after: 'cavendish-after'
      }
    }
  };

  $.fn.cavendish.plugins = {};

}).call(this);
// Generated by CoffeeScript 1.3.3
(function() {
  var $, CavendishArrowsPlugin, CavendishEventsPlugin, CavendishPagerPlugin, CavendishPanPlugin, CavendishPlayerPlugin, CavendishPlugin,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $ = jQuery;

  CavendishPlugin = (function() {

    function CavendishPlugin(cavendish) {
      this.cavendish = cavendish;
      this.options = this.cavendish.options = $.extend(true, {}, this.defaults(), this.cavendish.options);
    }

    CavendishPlugin.prototype.setup = function() {};

    CavendishPlugin.prototype.transition = function() {};

    CavendishPlugin.prototype.extensions = function() {
      return [];
    };

    CavendishPlugin.prototype.defaults = function() {
      return {
        class_names: {
          active: 'active',
          disabled: 'disabled'
        }
      };
    };

    return CavendishPlugin;

  })();

  CavendishPlayerPlugin = (function(_super) {

    __extends(CavendishPlayerPlugin, _super);

    function CavendishPlayerPlugin() {
      this.defaults = __bind(this.defaults, this);
      return CavendishPlayerPlugin.__super__.constructor.apply(this, arguments);
    }

    CavendishPlayerPlugin.prototype.setup = function() {
      var _this = this;
      this.show = this.cavendish.show;
      if (this.options.player_pause) {
        this.show.hover((function() {
          return _this.stop();
        }), (function() {
          return _this.start();
        }));
      }
      if (this.options.player_start) {
        return this.start();
      }
    };

    CavendishPlayerPlugin.prototype.start = function() {
      var _this = this;
      this.show.addClass(this.options.class_names.playing);
      return this.timeout = setInterval((function() {
        return _this.cavendish.next();
      }), this.options.slideTimeout);
    };

    CavendishPlayerPlugin.prototype.stop = function() {
      this.show.removeClass(this.options.class_names.playing);
      return clearInterval(this.timeout);
    };

    CavendishPlayerPlugin.prototype.defaults = function() {
      return $.extend(true, {}, CavendishPlayerPlugin.__super__.defaults.apply(this, arguments), {
        player_start: true,
        player_pause: true,
        slideTimeout: 2000,
        class_names: {
          playing: 'cavendish-playing'
        }
      });
    };

    return CavendishPlayerPlugin;

  })(CavendishPlugin);

  CavendishEventsPlugin = (function(_super) {

    __extends(CavendishEventsPlugin, _super);

    function CavendishEventsPlugin() {
      return CavendishEventsPlugin.__super__.constructor.apply(this, arguments);
    }

    CavendishEventsPlugin.prototype.setup = function() {
      return this.cavendish.show.trigger('cavendish-setup', [this.cavendish]);
    };

    CavendishEventsPlugin.prototype.transition = function() {
      return this.cavendish.show.trigger('cavendish-transition', [this.cavendish]);
    };

    return CavendishEventsPlugin;

  })(CavendishPlugin);

  CavendishPagerPlugin = (function(_super) {

    __extends(CavendishPagerPlugin, _super);

    function CavendishPagerPlugin() {
      return CavendishPagerPlugin.__super__.constructor.apply(this, arguments);
    }

    CavendishPagerPlugin.prototype.setup = function() {
      var _this = this;
      this.pager = $(this.cavendish.options.pagerSelector, this.cavendish.show);
      return this.pager.find(this.cavendish.options.pagerItemSelector).each(function(index, el) {
        return $(el).click(function() {
          _this.cavendish.goto(index);
          return false;
        });
      });
    };

    CavendishPagerPlugin.prototype.transition = function() {
      return this.pager.find(this.cavendish.options.pagerItemSelector).removeClass(this.cavendish.options.class_names.active).eq(this.cavendish.index).addClass(this.cavendish.options.class_names.active);
    };

    CavendishPagerPlugin.prototype.defaults = function() {
      return $.extend(true, {}, CavendishPagerPlugin.__super__.defaults.apply(this, arguments), {
        pagerSelector: '.cavendish-pager',
        pagerItemSelector: 'li'
      });
    };

    return CavendishPagerPlugin;

  })(CavendishPlugin);

  CavendishArrowsPlugin = (function(_super) {

    __extends(CavendishArrowsPlugin, _super);

    function CavendishArrowsPlugin() {
      return CavendishArrowsPlugin.__super__.constructor.apply(this, arguments);
    }

    CavendishArrowsPlugin.prototype.setup = function() {
      var _this = this;
      this.next = $('.cavendish-next').click(function() {
        _this.cavendish.next();
        return false;
      });
      return this.prev = $('.cavendish-prev').click(function() {
        _this.cavendish.prev();
        return false;
      });
    };

    CavendishArrowsPlugin.prototype.transition = function() {
      var last;
      if (!this.cavendish.options.loop) {
        last = this.cavendish.index + 1 === this.cavendish.length;
        this.next.toggleClass(this.cavendish.options.class_names.disabled, last);
        return this.prev.toggleClass(this.cavendish.options.class_names.disabled, this.cavendish.index === 0);
      }
    };

    return CavendishArrowsPlugin;

  })(CavendishPlugin);

  CavendishPanPlugin = (function(_super) {

    __extends(CavendishPanPlugin, _super);

    function CavendishPanPlugin() {
      return CavendishPanPlugin.__super__.constructor.apply(this, arguments);
    }

    CavendishPanPlugin.prototype.setup = function() {
      var _this = this;
      this.background = this.cavendish.show.find(this.cavendish.options.panSelector);
      return this.background.find(this.cavendish.options.panChildSelector).each(function(index, el) {
        return $(el).css('left', index * 100 + '%');
      });
    };

    CavendishPanPlugin.prototype.transition = function() {
      return this.background.css('left', (this.cavendish.index * -100 * this.cavendish.options.panFactor) + '%');
    };

    CavendishPanPlugin.prototype.defaults = function() {
      return $.extend(true, {}, CavendishPanPlugin.__super__.defaults.apply(this, arguments), {
        panFactor: 1,
        panSelector: '.cavendish-pan',
        panChildSelector: '> li'
      });
    };

    return CavendishPanPlugin;

  })(CavendishPlugin);

  $.fn.cavendish.plugins = {
    player: CavendishPlayerPlugin,
    events: CavendishEventsPlugin,
    pager: CavendishPagerPlugin,
    arrows: CavendishArrowsPlugin,
    pan: CavendishPanPlugin
  };

}).call(this);
