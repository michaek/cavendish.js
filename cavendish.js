// Generated by CoffeeScript 1.3.3
(function() {
  var $, Cavendish, defaults;

  $ = jQuery;

  Cavendish = (function() {

    Cavendish.prototype.version = '0.0.1';

    function Cavendish(show, options) {
      this.show = show;
      this.options = options;
      this.slides = this.show.find(this.options.slideSelector);
      if (this.slides.length > 0) {
        this.initialize();
      }
    }

    Cavendish.prototype.initialize = function() {
      var _this = this;
      this.plugins = $.map(this.options.use_plugins, function(name) {
        return new $.fn.cavendish.plugins[name](_this);
      });
      this.last = $();
      this.length = this.slides.length;
      this.show.data('cavendish', this).addClass(this.options.class_names.show);
      $.each(this.plugins, function() {
        return this.setup();
      });
      this.goto(0);
      return this.slides.not(this.current).addClass(this.options.class_names.slide.before);
    };

    Cavendish.prototype.next = function() {
      var index;
      index = this.index + 1;
      if (index >= this.length && this.options.loop) {
        index = 0;
      }
      return this.goto(index);
    };

    Cavendish.prototype.prev = function() {
      var index;
      index = this.index - 1;
      if (index < 0 && this.options.loop) {
        index = this.length - 1;
      }
      return this.goto(index);
    };

    Cavendish.prototype.goto = function(index) {
      var classes, key, name,
        _this = this;
      if (!(this.slides[index] != null)) {
        return;
      }
      this.index = index;
      if (this.current != null) {
        this.last = this.current;
      }
      this.current = this.slides.eq(this.index);
      classes = this.options.class_names.slide;
      this.slides.removeClass(((function() {
        var _results;
        _results = [];
        for (key in classes) {
          name = classes[key];
          _results.push(name);
        }
        return _results;
      })()).join(' '));
      this.last.addClass(classes.after);
      this.current.addClass(classes.on);
      this.slides.each(function(index, slide) {
        if (index < _this.index) {
          return $(slide).addClass(classes.left);
        } else if (index > _this.index) {
          return $(slide).addClass(classes.right);
        }
      });
      this.slides.not(this.last).not(this.current).addClass(classes.before);
      return $.each(this.plugins, function() {
        return this.transition();
      });
    };

    return Cavendish;

  })();

  $.fn.cavendish = function(options) {
    var cavendish;
    if (typeof options !== 'string') {
      options = $.extend(true, {}, defaults, options);
      return this.each(function() {
        return new Cavendish($(this), options);
      });
    } else {
      cavendish = $(this).data('cavendish');
      if (cavendish != null) {
        switch (options) {
          case 'next':
            cavendish.next();
            break;
          case 'prev':
            cavendish.prev();
            break;
          case 'cavendish':
            return cavendish;
        }
      }
      return this;
    }
  };

  defaults = $.fn.cavendish.defaults = {
    loop: true,
    slideSelector: '> ol > li',
    use_plugins: [],
    class_names: {
      show: 'cavendish-slideshow',
      slide: {
        left: 'cavendish-left',
        right: 'cavendish-right',
        on: 'cavendish-onstage',
        before: 'cavendish-before',
        after: 'cavendish-after'
      }
    }
  };

  $.fn.cavendish.plugins = {};

}).call(this);
